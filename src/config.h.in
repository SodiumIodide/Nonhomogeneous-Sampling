#ifndef _CONFIG_H
#define _CONFIG_H

#cmakedefine LINEAR
#cmakedefine QUADRATIC
#cmakedefine PIECEWISE
#cmakedefine REJECTION
#cmakedefine S2
#cmakedefine PUREABS
#cmakedefine GEOMETRYTIME
#cmakedefine ANALYTICAL
#cmakedefine VOLFRAC
#cmakedefine COX_UNIFORM
#cmakedefine COX_EXPONENTIAL
#cmakedefine COX_GAUSSIAN
#cmakedefine CONSTANT

#ifndef _CONSTANTS_H
#include "constants.h"
#endif

// Use preprocessor macros to keep logic within configuration file
// Variables referenced exist in main file

#ifdef CONSTANT
    #include "geometry_gen.h"
    #define GEOMETRY_GEN() do {\
        success = get_geometry(rng, START_VALUE[0], START_VALUE[1], END_DIST, NUM_DIVS, &x_delta, &x_arr, &materials, &num_r_cells);\
    } while (0)
    #define OPEN_FILE() do {\
        fp = fopen("../csv/flux_constant.csv", "w");\
    } while (0)
#elif defined PIECEWISE
    #ifdef QUADRATIC
        #ifdef REJECTION
            #include "piecewise_constant_quad_geometry_gen_rejection.h"
            #define GEOMETRY_GEN() do {\
                success = get_geometry_piecewise_constant_quad_rejection(rng, START_VALUE[0], END_VALUE[0], START_VALUE[1], END_VALUE[1], NUM_SEGMENTS, END_DIST, NUM_DIVS, &x_delta, &x_arr, &materials, &num_r_cells);\
            } while (0)
            #define OPEN_FILE() do {\
                fp = fopen("../csv/flux_piecewise_quad_thinning.csv", "w");\
            } while (0)
        #else
            #include "piecewise_constant_quad_geometry_gen.h"
            #define GEOMETRY_GEN() do {\
                success = get_geometry_piecewise_constant_quad(rng, START_VALUE[0], END_VALUE[0], START_VALUE[1], END_VALUE[1], NUM_SEGMENTS, END_DIST, NUM_DIVS, &x_delta, &x_arr, &materials, &num_r_cells);\
            } while (0)
            #define OPEN_FILE() do {\
                fp = fopen("../csv/flux_piecewise_quad.csv", "w");\
            } while (0)
        #endif
    #endif
    #ifdef LINEAR
        #ifdef REJECTION
            #include "piecewise_constant_geometry_gen_rejection.h"
            #define GEOMETRY_GEN() do {\
                success = get_geometry_piecewise_constant_rejection(rng, START_VALUE[0], END_VALUE[0], START_VALUE[1], END_VALUE[1], NUM_SEGMENTS, END_DIST, NUM_DIVS, &x_delta, &x_arr, &materials, &num_r_cells);\
            } while (0)
            #define OPEN_FILE() do {\
                fp = fopen("../csv/flux_piecewise_linear_thinning.csv", "w");\
            } while (0)
        #else
            #include "piecewise_constant_geometry_gen.h"
            #define GEOMETRY_GEN() do {\
                success = get_geometry_piecewise_constant(rng, START_VALUE[0], END_VALUE[0], START_VALUE[1], END_VALUE[1], NUM_SEGMENTS, END_DIST, NUM_DIVS, &x_delta, &x_arr, &materials, &num_r_cells);\
            } while (0)
            #define OPEN_FILE() do {\
                fp = fopen("../csv/flux_piecewise_linear.csv", "w");\
            } while (0)
        #endif
    #endif
#else
    #ifdef QUADRATIC
        #include "quad_geometry_gen_rejection.h"
        #define GEOMETRY_GEN() do {\
            success = get_geometry_quad_rejection(rng, START_VALUE[0], END_VALUE[0], START_VALUE[1], END_VALUE[1], END_DIST, NUM_DIVS, &x_delta, &x_arr, &materials, &num_r_cells);\
        } while (0)
        #define OPEN_FILE() do {\
            fp = fopen("../csv/flux_quad_thinning.csv", "w");\
        } while (0)
    #endif
    #ifdef LINEAR
        #ifdef REJECTION
            #include "linear_geometry_gen_rejection.h"
            #define GEOMETRY_GEN() do {\
                success = get_geometry_linear_rejection(rng, START_VALUE[0], END_VALUE[0], START_VALUE[1], END_VALUE[1], END_DIST, NUM_DIVS, &x_delta, &x_arr, &materials, &num_r_cells);\
            } while (0)
            #define OPEN_FILE() do {\
                fp = fopen("../csv/flux_linear_thinning.csv", "w");\
            } while (0)
        #else
            #ifdef COX_UNIFORM
                #include "uniform_cox_geometry_gen.h"
                #define GEOMETRY_GEN() do {\
                    success = get_geometry_cox_uniform(rng, COX_START_VALUE[0], COX_END_VALUE[0], COX_START_VALUE[1], COX_END_VALUE[1], END_DIST, NUM_DIVS, &x_delta, &x_arr, &materials, &num_r_cells);\
                } while (0)
                #define OPEN_FILE() do {\
                    fp = fopen("../csv/flux_cox_uniform.csv", "w");\
                } while (0)
            #elif defined COX_EXPONENTIAL
                #include "exponential_cox_geometry_gen.h"
                #define GEOMETRY_GEN() do {\
                    success = get_geometry_cox_exponential(rng, COX_START_VALUE[0], COX_END_VALUE[0], COX_START_VALUE[1], COX_END_VALUE[1], END_DIST, NUM_DIVS, &x_delta, &x_arr, &materials, &num_r_cells);\
                } while (0)
                #define OPEN_FILE() do {\
                    fp = fopen("../csv/flux_cox_exponential.csv", "w");\
                } while (0)
            #elif defined COX_GAUSSIAN
                #include "gaussian_cox_geometry_gen.h"
                #define GEOMETRY_GEN() do {\
                    success = get_geometry_cox_gaussian(rng, COX_START_VALUE[0], COX_END_VALUE[0], COX_START_VALUE[1], COX_END_VALUE[1], GAUSSIAN_VARIANCE[0], GAUSSIAN_VARIANCE[1], END_DIST, NUM_DIVS, &x_delta, &x_arr, &materials, &num_r_cells);\
                } while (0)
                #define OPEN_FILE() do {\
                    fp = fopen("../csv/flux_cox_gaussian.csv", "w");\
                } while (0)
            #else
                #include "linear_geometry_gen.h"
                #define GEOMETRY_GEN() do {\
                    success = get_geometry_linear(rng, START_VALUE[0], END_VALUE[0], START_VALUE[1], END_VALUE[1], END_DIST, NUM_DIVS, &x_delta, &x_arr, &materials, &num_r_cells);\
                } while (0)
                #define OPEN_FILE() do {\
                    fp = fopen("../csv/flux_linear.csv", "w");\
                } while (0)
            #endif
        #endif
    #endif
#endif

#endif
